1. Name error because foo was only defined within set_foo. Even though the function has been called, because the function returns none by default, python doesn't know what foo means. 
2. prints 'bar' because while running set_foo() foo is set to 'qux', but returns none. so when printing foo, it returns the variable as defined, 'bar'. Example of variable shadowing. 
4. identify the following in the code:
	1. Function name: multiply_numbers 
	2. function arguments: 2, 3, 4
	3. function definition: lines 1-3? (yes)
	4. function body: line 2 (correction - body includes return statement on line 3)
	5. function parameters: num1, num2, num3 
	6. function invocation: calling on line 5
	7. function return value: result (product of parameters) LS not clear that they wanted the specific result of function invocation having called it, i.e. 24
	8. all identifiers: product, result, multiply_numbers (not sure if parameters are identifiers or not ) (parameters are identifiers)
5. It doesn't print anything but it results in the concatenation of words and !!!! which you could assign to a variable, or print separately. 
6. it returns an unexpected indentation error (python also doesn't know the variable words outside of the function scream?) Otheriwse it's not great formatting because it isn't clear. is print part of the function and what the function is returning?Could be?
7. return an error becacuse have only passed one argument when calling the function foo
8. return an error, too many arguments, function only takes 2
9. print all numbers one on each line. works because have passed explicit values as all arguments, haven't accepted any default value
10. print 42, new line, print 3.141592, print 2
11. print 42, new line, print 3, print 2
12. either not print anything because it's none, or *throw an error because it requires at least one explicit argument.* 
13. error in the function itself - third needs a default value having already defined a default value for the second parameter 
14. all identifiers:
	1. multiply
	2. left
	3. right
	4. get_num
	5. prompt
	6. first_number
	7. second_number
	8. product
	9. Didn't realize that the following are also identifiers: print, input and float.
15. classify the identifiers as global, local or built-in:
	1. multiply - global
	2. left - local
	3. right - local 
	4. get_num - global
	5. prompt - local
	6. input - built in
	7. float - built in
	8. first_number - global
	9. second_number - global 
	10. product - global
	11. print - built in
16. Identify all function names and parameters present in the code, include line numbers
	1. multiply, function name, line 1 and line 9
	2. get_num, function name, line 4, line 7, line 8 
	3. left, parameter, line 1, line 2 (the line 2 is actually typically referred to as a variable)
	4. right, parameter, line 1, line 2
	5. prompt, parameter, line 4 and 5
	6. DON'T FORGET BUILT IN FUNCTIONS ARE FUNCTIONS. float, function name, line 5
	7. print, function name, line 10 
	8. input, line 5, function name 
17. function names: say, built in( print, input, max). Method names: upper, lower
18. 